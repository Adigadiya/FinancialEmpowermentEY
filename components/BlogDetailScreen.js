import React, { useState, useRef } from 'react';
import InflationQuiz from './InflationQuiz';
import {
  StyleSheet,
  View,
  Text,
  ScrollView,
  Animated,
  Dimensions,
  TouchableOpacity,
  TextInput,
  Image,
} from 'react-native';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import Slider from '@react-native-community/slider';
import { StatusBar } from 'expo-status-bar';

const { width } = Dimensions.get('window');
const CARD_WIDTH = width * 0.8;
const SPACING = 10;

const items = [
  { id: 1, name: { en: 'House', hi: 'рдордХрд╛рди' }, price1950: 25000, price2024: 7500000, image: require('../assets/house.jpg') },
  { id: 2, name: { en: 'Car', hi: 'рдХрд╛рд░' }, price1950: 5000, price2024: 1200000, image: require('../assets/car.jpeg') },
  { id: 3, name: { en: 'Movie Ticket', hi: 'рд╕рд┐рдиреЗрдорд╛ рдЯрд┐рдХрдЯ' }, price1950: 1, price2024: 250, image: require('../assets/ticket.jpeg') },
  { id: 4, name: { en: 'Petrol (Litre)', hi: 'рдкреЗрдЯреНрд░реЛрд▓ (рд▓реАрдЯрд░)' }, price1950: 0.5, price2024: 100, image: require('../assets/petrol.jpeg') },
  { id: 5, name: { en: 'Loaf of Bread', hi: 'рдмреНрд░реЗрдб' }, price1950: 0.2, price2024: 40, image: require('../assets/bread.jpeg') },
];

const translations = {
  en: {
    title: 'Inflation Calculator',
    comparison: 'Historical Price Comparison',
    calculate: 'Calculate Future Value',
    enterAmount: 'Enter amount',
    years: 'Years:',
    futureValue: 'Future Value:',
    learnMore: 'Learn More',
    whatIsInflation: 'What Is Inflation?',
    inflationDescription: 'Inflation is a gradual loss of purchasing power that is reflected in a broad rise in prices for goods and services over time. The inflation rate is calculated as the average price increase of a basket of selected goods and services over one year.',
    keyTakeaways: 'Key Takeaways',
    takeawayPoints: [
      'Inflation measures how quickly the prices of goods and services are rising.',
      'Inflation is classified into three types: demand-pull inflation, cost-push inflation, and built-in inflation.',
      'The most commonly used inflation indexes are the Consumer Price Index and the Wholesale Price Index.',
    ],
    howInflationImpactsPrices: 'How Inflation Impacts Prices',
    inflationImpactDescription: [
      'While it is easy to measure the price changes of individual products over time, human needs extend beyond just one or two products.',
      'Inflation aims to measure the overall impact of price changes for a diversified set of products and services.'
    ],
  },
  hi: {
    title: 'рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдХреИрд▓рдХреБрд▓реЗрдЯрд░',
    comparison: 'рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдореВрд▓реНрдп рддреБрд▓рдирд╛',
    calculate: 'рднрд╡рд┐рд╖реНрдп рдХрд╛ рдореВрд▓реНрдп рдЧрдгрдирд╛ рдХрд░реЗрдВ',
    enterAmount: 'рд░рд╛рд╢рд┐ рджрд░реНрдЬ рдХрд░реЗрдВ',
    years: 'рд╡рд░реНрд╖:',
    futureValue: 'рднрд╡рд┐рд╖реНрдп рдХрд╛ рдореВрд▓реНрдп:',
    whatIsInflation: 'рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдХреНрдпрд╛ рд╣реИ?',
    inflationDescription: 'рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдХреНрд░рдп рд╢рдХреНрддрд┐ рдХреА рдПрдХ рдХреНрд░рдорд┐рдХ рд╣рд╛рдирд┐ рд╣реИ рдЬреЛ рд╕рдордп рдХреЗ рд╕рд╛рде рд╡рд╕реНрддреБрдУрдВ рдФрд░ рд╕реЗрд╡рд╛рдУрдВ рдХреА рдХреАрдорддреЛрдВ рдореЗрдВ рд╡реНрдпрд╛рдкрдХ рд╡реГрджреНрдзрд┐ рдХреЗ рд░реВрдк рдореЗрдВ рдкрд░рд┐рд▓рдХреНрд╖рд┐рдд рд╣реЛрддреА рд╣реИред рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рджрд░ рдПрдХ рд╡рд░реНрд╖ рдореЗрдВ рдЪрдпрдирд┐рдд рд╡рд╕реНрддреБрдУрдВ рдФрд░ рд╕реЗрд╡рд╛рдУрдВ рдХреА рдЯреЛрдХрд░реА рдХреА рдФрд╕рдд рдореВрд▓реНрдп рд╡реГрджреНрдзрд┐ рдХреЗ рд░реВрдк рдореЗрдВ рдЧрдгрдирд╛ рдХреА рдЬрд╛рддреА рд╣реИред рдЙрдЪреНрдЪ рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдХрд╛ рдЕрд░реНрде рд╣реИ рдХрд┐ рдХреАрдорддреЗрдВ рддреЗрдЬреА рд╕реЗ рдмрдврд╝ рд░рд╣реА рд╣реИрдВ, рдЬрдмрдХрд┐ рдирд┐рдореНрди рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдХрд╛ рдЕрд░реНрде рд╣реИ рдХрд┐ рдХреАрдорддреЗрдВ рдзреАрд░реЗ-рдзреАрд░реЗ рдмрдврд╝ рд░рд╣реА рд╣реИрдВред рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдХреЛ рдЕрдкрд╕реНрдлреАрддрд┐ рдХреЗ рд╡рд┐рдкрд░реАрдд рджреЗрдЦрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ, рдЬреЛ рддрдм рд╣реЛрддреА рд╣реИ рдЬрдм рдХреАрдорддреЗрдВ рдЧрд┐рд░рддреА рд╣реИрдВ рдФрд░ рдХреНрд░рдп рд╢рдХреНрддрд┐ рдмрдврд╝рддреА рд╣реИред',
    keyTakeaways: 'рдореБрдЦреНрдп рдирд┐рд╖реНрдХрд░реНрд╖',
    takeawayPoints: [
      'рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдорд╛рдкрддреА рд╣реИ рдХрд┐ рд╡рд╕реНрддреБрдУрдВ рдФрд░ рд╕реЗрд╡рд╛рдУрдВ рдХреА рдХреАрдорддреЗрдВ рдХрд┐рддрдиреА рддреЗрдЬреА рд╕реЗ рдмрдврд╝ рд░рд╣реА рд╣реИрдВред',
      'рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдХреЛ рддреАрди рдкреНрд░рдХрд╛рд░реЛрдВ рдореЗрдВ рд╡рд░реНрдЧреАрдХреГрдд рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ: рдорд╛рдВрдЧ-рдЖрдХрд░реНрд╖рдг рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐, рд▓рд╛рдЧрдд-рдзрдХреНрдХрд╛ рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдФрд░ рдЕрдВрддрд░реНрдирд┐рд╣рд┐рдд рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ред',
      'рд╕рдмрд╕реЗ рдЕрдзрд┐рдХ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд┐рдП рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рд╕реВрдЪрдХрд╛рдВрдХ рдЙрдкрднреЛрдХреНрддрд╛ рдореВрд▓реНрдп рд╕реВрдЪрдХрд╛рдВрдХ рдФрд░ рдереЛрдХ рдореВрд▓реНрдп рд╕реВрдЪрдХрд╛рдВрдХ рд╣реИрдВред',
      'рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдХреЛ рд╡реНрдпрдХреНрддрд┐рдЧрдд рджреГрд╖реНрдЯрд┐рдХреЛрдг рдФрд░ рдкрд░рд┐рд╡рд░реНрддрди рджрд░ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕рдХрд╛рд░рд╛рддреНрдордХ рдпрд╛ рдирдХрд╛рд░рд╛рддреНрдордХ рд░реВрдк рд╕реЗ рджреЗрдЦрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред',
      'рдЬрд┐рдирдХреЗ рдкрд╛рд╕ рднреМрддрд┐рдХ рд╕рдВрдкрддреНрддрд┐ рд╣реИ, рд╡реЗ рдХреБрдЫ рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рджреЗрдЦрдирд╛ рдкрд╕рдВрдж рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдХреНрдпреЛрдВрдХрд┐ рдЗрд╕рд╕реЗ рдЙрдирдХреА рд╕рдВрдкрддреНрддрд┐ рдХрд╛ рдореВрд▓реНрдп рдмрдврд╝ рдЬрд╛рддрд╛ рд╣реИред'
    ],
    howInflationImpactsPrices: 'рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдХреИрд╕реЗ рдХреАрдорддреЛрдВ рдХреЛ рдкреНрд░рднрд╛рд╡рд┐рдд рдХрд░рддреА рд╣реИ',
    inflationImpactDescription: [
      'рдпрд╣ рд╕рдордЭрдирд╛ рдЖрд╕рд╛рди рд╣реИ рдХрд┐ рдПрдХрд▓ рдЙрддреНрдкрд╛рдж рдХреА рдХреАрдорддреЛрдВ рдореЗрдВ рд╕рдордп рдХреЗ рд╕рд╛рде рдкрд░рд┐рд╡рд░реНрддрди рдХреЛ рдорд╛рдкрд╛ рдЬрд╛рдП, рд▓реЗрдХрд┐рди рдорд╛рдирд╡ рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдБ рдХреЗрд╡рд▓ рдПрдХ рдпрд╛ рджреЛ рдЙрддреНрдкрд╛рджреЛрдВ рд╕реЗ рдЖрдЧреЗ рдмрдврд╝рддреА рд╣реИрдВред',
      'рдореБрджреНрд░рд╛рд╕реНрдлреАрддрд┐ рдХрд╛ рдЙрджреНрджреЗрд╢реНрдп рдЙрддреНрдкрд╛рджреЛрдВ рдФрд░ рд╕реЗрд╡рд╛рдУрдВ рдХреЗ рдПрдХ рд╡рд┐рд╡рд┐рдз рд╕реЗрдЯ рдХреЗ рд▓рд┐рдП рдореВрд▓реНрдп рдкрд░рд┐рд╡рд░реНрддрдиреЛрдВ рдХреЗ рд╕рдордЧреНрд░ рдкреНрд░рднрд╛рд╡ рдХреЛ рдорд╛рдкрдирд╛ рд╣реИред'
    ],
  }
};

export default function App() {
  const [amount, setAmount] = useState('1000');
  const [years, setYears] = useState(10);
  const [language, setLanguage] = useState('en');

  const calculateInflation = (amount, years) => {
    const rate = 0.05;
    return (amount * Math.pow(1 + rate, years)).toFixed(2);
  };

  return (
    
    <GestureHandlerRootView style={styles.container}>
      

      <StatusBar style="light" />
      <ScrollView style={styles.scrollView}>
      <View style={styles.languageSwitcher}>
  <TouchableOpacity onPress={() => setLanguage('en')} style={styles.langButton}>
    <Text style={styles.langText}>ЁЯЗмЁЯЗз English</Text>
  </TouchableOpacity>
  <TouchableOpacity onPress={() => setLanguage('hi')} style={styles.langButton}>
    <Text style={styles.langText}>ЁЯЗоЁЯЗ│ рд╣рд┐рдиреНрджреА</Text>
  </TouchableOpacity>
</View>

     
      <View style={styles.section}>
  <Text style={styles.sectionTitle}>{translations[language].whatIsInflation}</Text>
  <Text style={styles.description}>{translations[language].inflationDescription}</Text>
</View>

        

        <View style={styles.section}>

          <Text style={styles.sectionTitle}>{translations[language].comparison}</Text>
          <ScrollView horizontal pagingEnabled showsHorizontalScrollIndicator={false} contentContainerStyle={styles.cardContainer}>
            {items.map((item) => (
              <View key={item.id} style={styles.card}>
                <Image source={item.image} style={styles.cardImage} />
                <Text style={styles.cardTitle}>{item.name[language]}</Text>
                <Text style={styles.price}>1950: тВ╣{item.price1950}</Text>
                <Text style={styles.price}>2024: тВ╣{item.price2024}</Text>
              </View>
            ))}
          </ScrollView>
        </View>

        <View style={styles.section}>
  <Text style={styles.sectionTitle}>{translations[language].howInflationImpactsPrices}</Text>
  {translations[language].inflationImpactDescription.map((text, index) => (
    <Text key={index} style={styles.description}>{text}</Text>
  ))}
</View>


        <View style={styles.section}>
          <Text style={styles.sectionTitle}>{translations[language].calculate}</Text>
          <View style={styles.calculatorContainer}>
            <TextInput style={styles.input} value={amount} onChangeText={setAmount} keyboardType="numeric" placeholder={translations[language].enterAmount} placeholderTextColor="#FFD700" />
            <Text style={styles.label}>{translations[language].years} {years}</Text>
            <Slider style={styles.slider} minimumValue={1} maximumValue={30} step={1} value={years} onValueChange={setYears} minimumTrackTintColor="#FFD700" thumbTintColor="#FFD700" />
            <View style={styles.resultContainer}>
              <Text style={styles.resultLabel}>{translations[language].futureValue}</Text>
              <Text style={styles.resultValue}>тВ╣{calculateInflation(parseFloat(amount) || 0, years)}</Text>
            </View>
          </View>
        </View>
        <Text style={styles.sectionTitle}>{translations[language].keyTakeaways}</Text>
{translations[language].takeawayPoints.map((point, index) => (
  <Text key={index} style={styles.description}>тАв {point}</Text>
))}
      <View style={styles.quizContainer}>
        <Text style={styles.quizHeading}>Test Your Knowledge on Inflation!</Text>
        <InflationQuiz language={language}/>
      </View>

      </ScrollView>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  quizContainer: {
    marginTop: 30,
    backgroundColor: '#000',
    padding: 20,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#ddd',
  },
  quizHeading: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',  // Dark Blue for quiz heading (EY theme)
    marginBottom: 10,
  },
  description: {
    fontSize: 16,
    lineHeight: 24,
    color: '#fff',
    textAlign: 'justify',
    marginBottom: 10,
  },
  sectionTitle: {
    fontSize: 18,
    marginTop:40,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#000',
  },
  container: { flex: 1, backgroundColor: '#000' },
  scrollView: { flex: 1, paddingTop: 60 },
  languageSwitcher: { flexDirection: 'row', justifyContent: 'center', marginBottom: 20 },
  langButton: { padding: 10, backgroundColor: '#FFD700', marginHorizontal: 5, borderRadius: 5 },
  langText: { color: '#000', fontWeight: 'bold' },
  title: { fontSize: 26, fontWeight: 'bold', textAlign: 'center', marginBottom: 20, color: '#FFD700' },
  section: { marginBottom: 30, paddingHorizontal: 20 },
  sectionTitle: { fontSize: 22, fontWeight: '600', marginBottom: 15, color: '#FFD700' },
  cardContainer: { paddingHorizontal: SPACING },
  card: { width: CARD_WIDTH, backgroundColor: '#222', borderRadius: 15, padding: 20, marginHorizontal: SPACING, elevation: 5, alignItems: 'center' },
  cardImage: { width: 80, height: 80, marginBottom: 10 },
  cardTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 10, color: '#FFD700' },
  price: { fontSize: 16, marginBottom: 5, color: '#FFF' },
  calculatorContainer: { backgroundColor: '#222', borderRadius: 15, padding: 20, elevation: 5 },
  input: { borderWidth: 1, borderColor: '#FFD700', borderRadius: 8, padding: 10, marginBottom: 15, fontSize: 16, color: '#FFF' },
  label: { fontSize: 16, marginBottom: 5, color: '#FFD700' },
  slider: { width: '100%', height: 40, marginBottom: 15 },
  resultContainer: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginTop: 10 },
  resultLabel: { fontSize: 16, color: '#FFD700' },
  resultValue: { fontSize: 18, fontWeight: 'bold', color: '#FFD700' },
});  